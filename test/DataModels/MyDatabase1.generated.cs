//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : TestDB
	/// Data Source    : (localdb)\v11.0
	/// Server Version : 11.00.3000
	/// </summary>
	public partial class TestDBDB : LinqToDB.Data.DataConnection
	{
		public ITable<Project>        Projects        { get { return this.GetTable<Project>(); } }
		public ITable<Role>           Roles           { get { return this.GetTable<Role>(); } }
		public ITable<Status>         Status          { get { return this.GetTable<Status>(); } }
		public ITable<Task>           Tasks           { get { return this.GetTable<Task>(); } }
		public ITable<User>           Users           { get { return this.GetTable<User>(); } }
		public ITable<UsersToProject> UsersToProjects { get { return this.GetTable<UsersToProject>(); } }

		public TestDBDB()
		{
			InitDataContext();
		}

		public TestDBDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Projects")]
	public partial class Project
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // int
		[Column,     Nullable] public string Name     { get; set; } // nchar(50)
		[Column,     Nullable] public string Code     { get; set; } // nchar(10)
		[Column,     Nullable] public int?   StatusId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Projects_Status
		/// </summary>
		[Association(ThisKey="StatusId", OtherKey="Id", CanBeNull=true, KeyName="FK_Projects_Status")]
		public Status Status { get; set; }

		/// <summary>
		/// FK_UsersToProject_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<UsersToProject> UsersToProjectProjects { get; set; }

		/// <summary>
		/// FK_Tasks_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<Task> TasksProjects { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Roles")]
	public partial class Role
	{
		[PrimaryKey, Identity] public int    Id   { get; set; } // int
		[Column,     Nullable] public string Name { get; set; } // nvarchar(50)
	}

	[Table(Schema="dbo", Name="Status")]
	public partial class Status
	{
		[PrimaryKey, Identity] public int    Id   { get; set; } // int
		[Column,     Nullable] public string Name { get; set; } // nchar(30)

		#region Associations

		/// <summary>
		/// FK_Projects_Status_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StatusId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<Project> Projects { get; set; }

		/// <summary>
		/// FK_Tasks_Status_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StatusId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<Task> Tasks { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Tasks")]
	public partial class Task
	{
		[PrimaryKey, Identity] public int       Id          { get; set; } // int
		[Column,     Nullable] public string    TaskName    { get; set; } // nchar(50)
		[Column,     Nullable] public string    Description { get; set; } // nvarchar(max)
		[Column,     Nullable] public int?      StatusId    { get; set; } // int
		[Column,     Nullable] public int?      ProjectId   { get; set; } // int
		[Column,     Nullable] public int?      UserId      { get; set; } // int
		[Column,     Nullable] public DateTime? CreateDate  { get; set; } // date
		[Column,     Nullable] public int?      Time        { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Tasks_Status
		/// </summary>
		[Association(ThisKey="StatusId", OtherKey="Id", CanBeNull=true, KeyName="FK_Tasks_Status")]
		public Status Status { get; set; }

		/// <summary>
		/// FK_Tasks_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, KeyName="FK_Tasks_Project")]
		public Project Project { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Users")]
	public partial class User
	{
		[PrimaryKey, Identity   ] public int    Id       { get; set; } // int
		[Column,        Nullable] public string Login    { get; set; } // nchar(30)
		[Column,     NotNull    ] public Guid   Password { get; set; } // uniqueidentifier
		[Column,        Nullable] public string FIO      { get; set; } // nchar(70)
		[Column,        Nullable] public int?   StatusId { get; set; } // int
		[Column,        Nullable] public int?   RoleId   { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_UsersToProject_User_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<UsersToProject> UsersToProjectUsers { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="UsersToProject")]
	public partial class UsersToProject
	{
		[PrimaryKey, Identity] public int  Id        { get; set; } // int
		[Column,     Nullable] public int? UserId    { get; set; } // int
		[Column,     Nullable] public int? ProjectId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_UsersToProject_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, KeyName="FK_UsersToProject_Project")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_UsersToProject_User
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=true, KeyName="FK_UsersToProject_User")]
		public User User { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Project Find(this ITable<Project> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Role Find(this ITable<Role> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Status Find(this ITable<Status> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Task Find(this ITable<Task> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static User Find(this ITable<User> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static UsersToProject Find(this ITable<UsersToProject> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
